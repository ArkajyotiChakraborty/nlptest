:orphan:
:orphan:

.. INDEX

:py:mod:`nlptest.transform`
===========================

.. py:module:: nlptest.transform


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   nlptest.transform.TestFactory
   nlptest.transform.ITests
   nlptest.transform.RobustnessTestFactory
   nlptest.transform.BiasTestFactory
   nlptest.transform.RepresentationTestFactory
   nlptest.transform.FairnessTestFactory
   nlptest.transform.AccuracyTestFactory




.. py:class:: TestFactory

   A factory class for creating and running different types of tests on data.

   ...

   Methods
   -------
   transform(data: List[Sample], test_types: dict) -> List[Results]:
       Runs the specified tests on the given data and returns a list of results.

   test_categories() -> dict:
       Returns a dictionary mapping test category names to the corresponding test classes.

   test_scenarios() -> dict:
       Returns a dictionary mapping test class names to the available test scenarios for each class.

   .. py:method:: transform(data: List[nlptest.utils.custom_types.Sample], test_types: dict, model: nlptest.modelhandler.ModelFactory)
      :staticmethod:

      Runs the specified tests on the given data and returns a list of results.

      Parameters
      ----------
      data : List[Sample]
          The data to be tested.
      test_types : dict
          A dictionary mapping test category names to lists of test scenario names.
      model: ModelFactory
          Model to be tested.

      Returns
      -------
      List[Results]
          A list of results from running the specified tests on the data.


   .. py:method:: test_catgories()
      :classmethod:

      Returns a dictionary mapping test category names to the corresponding test classes.

      Returns
      -------
      dict
          A dictionary mapping test category names to the corresponding test classes.


   .. py:method:: test_scenarios()
      :classmethod:

      Returns a dictionary mapping test class names to the available test scenarios for each class.

      Returns
      -------
      dict
          A dictionary mapping test class names to the available test scenarios for each class.



.. py:class:: ITests



   An abstract base class for defining different types of tests.

   ...

   Methods
   -------
   transform() -> List[Results]:
       Runs the test and returns the results.

   available_tests() -> List[str]:
       Returns a list of available test scenarios for the test class.

   .. py:method:: transform()
      :abstractmethod:

      Runs the test and returns the results.

      Returns
      -------
      List[Results]
          A list of results from running the test.


   .. py:method:: available_tests()
      :classmethod:

      Returns a list of available test scenarios for the test class.

      Returns
      -------
      List[str]
          A list of available test scenarios for the test class.



.. py:class:: RobustnessTestFactory(data_handler: List[nlptest.utils.custom_types.Sample], tests=None, model: nlptest.modelhandler.ModelFactory = None)



   An abstract base class for defining different types of tests.

   ...

   Methods
   -------
   transform() -> List[Results]:
       Runs the test and returns the results.

   available_tests() -> List[str]:
       Returns a list of available test scenarios for the test class.

   .. py:attribute:: alias_name
      :annotation: = robustness

      A class for performing robustness tests on a given dataset.

      ...

      Attributes
      ----------
      supported_tests : dict
          A dictionary of supported robustness test scenarios.
      tests : dict
          A dictionary of test names and corresponding parameters.
      _data_handler : List[Sample]
          A list of `Sample` objects representing the input dataset.

      Methods
      -------
      transform() -> List[Sample]:
          Runs the robustness test and returns the resulting `Sample` objects.

      available_tests() -> dict:
          Returns a dictionary of available test scenarios for the `Robustness` class.


   .. py:method:: transform() -> List[nlptest.utils.custom_types.Sample]

      Runs the robustness test and returns the resulting `Sample` objects.

      Returns
      -------
      List[Sample]
          A list of `Sample` objects representing the resulting dataset after running the robustness test.


   .. py:method:: available_tests() -> dict
      :classmethod:

      Get a dictionary of all available tests, with their names as keys and their corresponding classes as values.

      Returns:
          dict: A dictionary of test names and classes.




.. py:class:: BiasTestFactory(data_handler: List[nlptest.utils.custom_types.Sample], tests=None, model: nlptest.modelhandler.ModelFactory = None)



   An abstract base class for defining different types of tests.

   ...

   Methods
   -------
   transform() -> List[Results]:
       Runs the test and returns the results.

   available_tests() -> List[str]:
       Returns a list of available test scenarios for the test class.

   .. py:attribute:: alias_name
      :annotation: = bias

      A class for performing bias tests on a given dataset.

      ...

      Attributes
      ----------
      supported_tests : dict
          A dictionary of supported bias test scenarios.
      tests : dict
          A dictionary of test names and corresponding parameters.
      _data_handler : List[Sample]
          A list of `Sample` objects representing the input dataset.

      Methods
      -------
      transform() -> List[Sample]:
          Runs the bias test and returns the resulting `Sample` objects.

      available_tests() -> dict:
          Returns a dictionary of available test scenarios for the `bias` class.


   .. py:method:: transform()

      Runs the robustness test and returns the resulting `Sample` objects.

      Returns
      -------
      List[Sample]
          A list of `Sample` objects representing the resulting dataset after running the robustness test.


   .. py:method:: available_tests() -> dict
      :classmethod:

      Get a dictionary of all available tests, with their names as keys and their corresponding classes as values.

      Returns:
          dict: A dictionary of test names and classes.




.. py:class:: RepresentationTestFactory(data_handler: List[nlptest.utils.custom_types.Sample], tests=None, model: nlptest.modelhandler.ModelFactory = None)



   An abstract base class for defining different types of tests.

   ...

   Methods
   -------
   transform() -> List[Results]:
       Runs the test and returns the results.

   available_tests() -> List[str]:
       Returns a list of available test scenarios for the test class.

   .. py:attribute:: alias_name
      :annotation: = representation

      A class for performing representation tests on a given dataset.

      ...

      Attributes
      ----------
      supported_tests : dict
          A dictionary of supported representation test scenarios.
      tests : dict
          A dictionary of test names and corresponding parameters.
      _data_handler : List[Sample]
          A list of `Sample` objects representing the input dataset.

      Methods
      -------
      transform() -> List[Sample]:
          Runs the representation test and returns the resulting `Sample` objects.

      available_tests() -> dict:
          Returns a dictionary of available test scenarios for the `representation` class.


   .. py:method:: transform()

      Runs the robustness test and returns the resulting `Sample` objects.

      Returns
      -------
      List[Sample]
          A list of `Sample` objects representing the resulting dataset after running the robustness test.


   .. py:method:: available_tests() -> dict
      :classmethod:

      Get a dictionary of all available tests, with their names as keys and their corresponding classes as values.

      Returns:
          dict: A dictionary of test names and classes.




.. py:class:: FairnessTestFactory(data_handler: List[nlptest.utils.custom_types.Sample], tests, model: nlptest.modelhandler.ModelFactory)



   An abstract base class for defining different types of tests.

   ...

   Methods
   -------
   transform() -> List[Results]:
       Runs the test and returns the results.

   available_tests() -> List[str]:
       Returns a list of available test scenarios for the test class.

   .. py:attribute:: alias_name
      :annotation: = fairness

      A class for performing fairness tests on a given dataset.

      ...

      Attributes
      ----------
      supported_tests : dict
          A dictionary of supported fairness test scenarios.
      tests : dict
          A dictionary of test names and corresponding parameters.
      _data_handler : List[Sample]
          A list of `Sample` objects representing the input dataset.

      Methods
      -------
      transform() -> List[Sample]:
          Runs the fairness test and returns the resulting `Sample` objects.

      available_tests() -> dict:
          Returns a dictionary of available test scenarios for the `fairness` class.


   .. py:method:: transform()

      Runs the robustness test and returns the resulting `Sample` objects.

      Returns
      -------
      List[Sample]
          A list of `Sample` objects representing the resulting dataset after running the robustness test.


   .. py:method:: available_tests() -> dict
      :classmethod:

      Get a dictionary of all available tests, with their names as keys and their corresponding classes as values.

      Returns:
          dict: A dictionary of test names and classes.




.. py:class:: AccuracyTestFactory(data_handler: List[nlptest.utils.custom_types.Sample], tests, model: nlptest.modelhandler.ModelFactory)



   An abstract base class for defining different types of tests.

   ...

   Methods
   -------
   transform() -> List[Results]:
       Runs the test and returns the results.

   available_tests() -> List[str]:
       Returns a list of available test scenarios for the test class.

   .. py:attribute:: alias_name
      :annotation: = accuracy

      A class for performing accuracy tests on a given dataset.

      ...

      Attributes
      ----------
      supported_tests : dict
          A dictionary of supported accuracy test scenarios.
      tests : dict
          A dictionary of test names and corresponding parameters.
      _data_handler : List[Sample]
          A list of `Sample` objects representing the input dataset.

      Methods
      -------
      transform() -> List[Sample]:
          Runs the accuracy test and returns the resulting `Sample` objects.

      available_tests() -> dict:
          Returns a dictionary of available test scenarios for the `accuracy` class.


   .. py:method:: transform()

      Runs the robustness test and returns the resulting `Sample` objects.

      Returns
      -------
      List[Sample]
          A list of `Sample` objects representing the resulting dataset after running the robustness test.


   .. py:method:: available_tests() -> dict
      :classmethod:

      Get a dictionary of all available tests, with their names as keys and their corresponding classes as values.

      Returns:
          dict: A dictionary of test names and classes.




